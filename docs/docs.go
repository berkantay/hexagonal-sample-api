// Code generated by swaggo/swag. DO NOT EDIT.

package docs

import "github.com/swaggo/swag"

const docTemplate = `{
    "schemes": {{ marshal .Schemes }},
    "swagger": "2.0",
    "info": {
        "description": "{{escape .Description}}",
        "title": "{{.Title}}",
        "contact": {},
        "version": "{{.Version}}"
    },
    "host": "{{.Host}}",
    "basePath": "{{.BasePath}}",
    "paths": {
        "/weather/": {
            "get": {
                "description": "Get weather condition for a coordinate.",
                "consumes": [
                    "application/json"
                ],
                "produces": [
                    "application/json"
                ],
                "summary": "Get weather condition for a coordinate",
                "parameters": [
                    {
                        "type": "string",
                        "description": "Latitude",
                        "name": "latitude",
                        "in": "query",
                        "required": true
                    },
                    {
                        "type": "string",
                        "description": "Longitude",
                        "name": "longitude",
                        "in": "query",
                        "required": true
                    }
                ],
                "responses": {
                    "200": {
                        "description": "OK",
                        "schema": {
                            "type": "array",
                            "items": {
                                "$ref": "#/definitions/domain.Weather"
                            }
                        }
                    },
                    "400": {
                        "description": "Bad Request",
                        "schema": {
                            "$ref": "#/definitions/domain.ErrorResponse"
                        }
                    },
                    "422": {
                        "description": "Unprocessable Entity",
                        "schema": {
                            "$ref": "#/definitions/domain.ErrorResponse"
                        }
                    }
                }
            }
        }
    },
    "definitions": {
        "domain.Condition": {
            "type": "object",
            "properties": {
                "code": {
                    "type": "integer"
                },
                "icon": {
                    "type": "string"
                },
                "text": {
                    "type": "string"
                }
            }
        },
        "domain.Current": {
            "type": "object",
            "properties": {
                "cloud": {
                    "type": "integer"
                },
                "condition": {
                    "$ref": "#/definitions/domain.Condition"
                },
                "feelslike_c": {
                    "type": "number"
                },
                "feelslike_f": {
                    "type": "number"
                },
                "gust_kph": {
                    "type": "number"
                },
                "gust_mph": {
                    "type": "number"
                },
                "humidity": {
                    "type": "integer"
                },
                "is_day": {
                    "type": "integer"
                },
                "last_updated": {
                    "type": "string"
                },
                "last_updated_epoch": {
                    "type": "integer"
                },
                "precip_in": {
                    "type": "number"
                },
                "precip_mm": {
                    "type": "number"
                },
                "pressure_in": {
                    "type": "number"
                },
                "pressure_mb": {
                    "type": "number"
                },
                "temp_c": {
                    "type": "number"
                },
                "temp_f": {
                    "type": "number"
                },
                "uv": {
                    "type": "number"
                },
                "vis_km": {
                    "type": "number"
                },
                "vis_miles": {
                    "type": "number"
                },
                "wind_degree": {
                    "type": "integer"
                },
                "wind_dir": {
                    "type": "string"
                },
                "wind_kph": {
                    "type": "number"
                },
                "wind_mph": {
                    "type": "number"
                }
            }
        },
        "domain.ErrorResponse": {
            "type": "object",
            "properties": {
                "error": {
                    "type": "string"
                }
            }
        },
        "domain.Location": {
            "type": "object",
            "properties": {
                "country": {
                    "type": "string"
                },
                "lat": {
                    "type": "number"
                },
                "localtime": {
                    "type": "string"
                },
                "localtime_epoch": {
                    "type": "integer"
                },
                "lon": {
                    "type": "number"
                },
                "name": {
                    "type": "string"
                },
                "region": {
                    "type": "string"
                },
                "tz_id": {
                    "type": "string"
                }
            }
        },
        "domain.Weather": {
            "type": "object",
            "properties": {
                "current": {
                    "$ref": "#/definitions/domain.Current"
                },
                "location": {
                    "$ref": "#/definitions/domain.Location"
                }
            }
        }
    }
}`

// SwaggerInfo holds exported Swagger Info so clients can modify it
var SwaggerInfo = &swag.Spec{
	Version:          "",
	Host:             "",
	BasePath:         "/",
	Schemes:          []string{},
	Title:            "",
	Description:      "",
	InfoInstanceName: "swagger",
	SwaggerTemplate:  docTemplate,
	LeftDelim:        "{{",
	RightDelim:       "}}",
}

func init() {
	swag.Register(SwaggerInfo.InstanceName(), SwaggerInfo)
}
